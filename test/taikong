<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>太空射击</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            background: #000;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            font-family: Arial, sans-serif;
        }
        
        #game-container {
            position: relative;
            width: 400px;
            height: 600px;
            background: linear-gradient(to bottom, #000428, #004e92);
            border: 2px solid #00f;
            box-shadow: 0 0 20px rgba(0, 0, 255, 0.5);
            overflow: hidden;
        }
        
        #game-canvas {
            position: absolute;
            top: 0;
            left: 0;
        }
        
        #start-screen, #game-over-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background: rgba(0, 0, 0, 0.8);
            color: white;
            z-index: 10;
        }
        
        #game-over-screen {
            display: none;
        }
        
        h1 {
            color: #0ff;
            text-shadow: 0 0 10px #0ff;
            margin-bottom: 20px;
            font-size: 2.5em;
        }
        
        button {
            padding: 10px 20px;
            background: #00f;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 1.2em;
            margin-top: 20px;
            cursor: pointer;
            transition: all 0.3s;
            box-shadow: 0 0 10px rgba(0, 0, 255, 0.5);
        }
        
        button:hover {
            background: #0af;
            transform: scale(1.1);
        }
        
        .score-display {
            position: absolute;
            top: 10px;
            left: 10px;
            color: white;
            font-size: 1.2em;
            z-index: 5;
        }
        
        .health-bar {
            position: absolute;
            top: 10px;
            right: 10px;
            width: 100px;
            height: 20px;
            border: 2px solid #f00;
            z-index: 5;
        }
        
        .health-fill {
            height: 100%;
            width: 100%;
            background: #f00;
            transition: width 0.3s;
        }
        
        #controls {
            position: absolute;
            bottom: 20px;
            color: #aaa;
            font-size: 0.8em;
            text-align: center;
            width: 100%;
        }
    </style>
</head>
<body>
    <div id="game-container">
        <canvas id="game-canvas" width="400" height="600"></canvas>
        
        <div class="score-display">分数: <span id="score">0</span></div>
        <div class="health-bar">
            <div class="health-fill" id="health"></div>
        </div>
        
        <div id="start-screen">
            <h1>太空射击</h1>
            <p>躲避陨石，消灭敌人!</p>
            <button id="start-btn">开始游戏</button>
            <div id="controls">
                控制: 方向键移动 | 空格键射击
            </div>
        </div>
        
        <div id="game-over-screen">
            <h1>游戏结束</h1>
            <p>最终分数: <span id="final-score">0</span></p>
            <button id="restart-btn">再来一次</button>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const canvas = document.getElementById('game-canvas');
            const ctx = canvas.getContext('2d');
            const startScreen = document.getElementById('start-screen');
            const gameOverScreen = document.getElementById('game-over-screen');
            const startBtn = document.getElementById('start-btn');
            const restartBtn = document.getElementById('restart-btn');
            const scoreEl = document.getElementById('score');
            const finalScoreEl = document.getElementById('final-score');
            const healthEl = document.getElementById('health');
            
            // 游戏状态
            let score = 0;
            let health = 100;
            let gameRunning = false;
            let animationId = null;
            
            // 玩家飞船
            const player = {
                x: canvas.width / 2 - 25,
                y: canvas.height - 80,
                width: 50,
                height: 50,
                speed: 5,
                color: '#0af',
                bullets: [],
                lastShot: 0,
                shootDelay: 300 // 射击冷却时间(毫秒)
            };
            
            // 敌人
            const enemies = [];
            const enemySettings = {
                width: 40,
                height: 40,
                speed: 2,
                spawnRate: 1000, // 敌人生成间隔(毫秒)
                lastSpawn: 0
            };
            
            // 陨石
            const meteors = [];
            const meteorSettings = {
                width: 30,
                height: 30,
                speed: 3,
                spawnRate: 800, // 陨石生成间隔(毫秒)
                lastSpawn: 0
            };
            
            // 爆炸效果
            const explosions = [];
            
            // 星星背景
            const stars = [];
            for (let i = 0; i < 100; i++) {
                stars.push({
                    x: Math.random() * canvas.width,
                    y: Math.random() * canvas.height,
                    size: Math.random() * 2 + 1,
                    speed: Math.random() * 3 + 1
                });
            }
            
            // 键盘状态
            const keys = {
                ArrowLeft: false,
                ArrowRight: false,
                ArrowUp: false,
                ArrowDown: false,
                ' ': false
            };
            
            // 绘制玩家飞船
            function drawPlayer() {
                ctx.fillStyle = player.color;
                
                // 飞船主体
                ctx.beginPath();
                ctx.moveTo(player.x + player.width / 2, player.y);
                ctx.lineTo(player.x + player.width, player.y + player.height);
                ctx.lineTo(player.x, player.y + player.height);
                ctx.closePath();
                ctx.fill();
                
                // 飞船尾部火焰
                if (keys.ArrowUp || Math.random() > 0.7) {
                    ctx.fillStyle = '#f80';
                    ctx.beginPath();
                    ctx.moveTo(player.x + player.width / 2, player.y + player.height);
                    ctx.lineTo(player.x + player.width / 3, player.y + player.height + 15);
                    ctx.lineTo(player.x + player.width * 2/3, player.y + player.height + 15);
                    ctx.closePath();
                    ctx.fill();
                }
            }
            
            // 绘制子弹
            function drawBullets() {
                ctx.fillStyle = '#ff0';
                player.bullets.forEach(bullet => {
                    ctx.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);
                });
            }
            
            // 绘制敌人
            function drawEnemies() {
                enemies.forEach(enemy => {
                    ctx.fillStyle = '#f00';
                    
                    // 敌人飞船
                    ctx.beginPath();
                    ctx.moveTo(enemy.x + enemy.width / 2, enemy.y + enemy.height);
                    ctx.lineTo(enemy.x + enemy.width, enemy.y);
                    ctx.lineTo(enemy.x, enemy.y);
                    ctx.closePath();
                    ctx.fill();
                    
                    // 敌人眼睛
                    ctx.fillStyle = '#fff';
                    ctx.beginPath();
                    ctx.arc(enemy.x + enemy.width / 3, enemy.y + enemy.height / 3, 3, 0, Math.PI * 2);
                    ctx.arc(enemy.x + enemy.width * 2/3, enemy.y + enemy.height / 3, 3, 0, Math.PI * 2);
                    ctx.fill();
                });
            }
            
            // 绘制陨石
            function drawMeteors() {
                meteors.forEach(meteor => {
                    ctx.fillStyle = '#888';
                    ctx.beginPath();
                    ctx.arc(meteor.x + meteor.width / 2, meteor.y + meteor.height / 2, meteor.width / 2, 0, Math.PI * 2);
                    ctx.fill();
                    
                    // 陨石纹理
                    ctx.fillStyle = '#666';
                    ctx.beginPath();
                    ctx.arc(meteor.x + meteor.width / 3, meteor.y + meteor.height / 3, 2, 0, Math.PI * 2);
                    ctx.arc(meteor.x + meteor.width * 2/3, meteor.y + meteor.height / 4, 3, 0, Math.PI * 2);
                    ctx.arc(meteor.x + meteor.width / 4, meteor.y + meteor.height * 3/4, 2, 0, Math.PI * 2);
                    ctx.fill();
                });
            }
            
            // 绘制爆炸效果
            function drawExplosions() {
                explosions.forEach((explosion, index) => {
                    ctx.fillStyle = `rgba(255, ${100 + explosion.frame * 10}, 0, ${1 - explosion.frame * 0.1})`;
                    ctx.beginPath();
                    ctx.arc(explosion.x, explosion.y, explosion.radius + explosion.frame * 2, 0, Math.PI * 2);
                    ctx.fill();
                    
                    explosion.frame++;
                    if (explosion.frame > 10) {
                        explosions.splice(index, 1);
                    }
                });
            }
            
            // 绘制星星背景
            function drawStars() {
                ctx.fillStyle = '#fff';
                stars.forEach(star => {
                    ctx.fillRect(star.x, star.y, star.size, star.size);
                });
            }
            
            // 更新星星位置
            function updateStars() {
                stars.forEach(star => {
                    star.y += star.speed;
                    if (star.y > canvas.height) {
                        star.y = 0;
                        star.x = Math.random() * canvas.width;
                    }
                });
            }
            
            // 玩家射击
            function shoot() {
                const now = Date.now();
                if (now - player.lastShot > player.shootDelay) {
                    player.bullets.push({
                        x: player.x + player.width / 2 - 2.5,
                        y: player.y,
                        width: 5,
                        height: 15,
                        speed: 7
                    });
                    player.lastShot = now;
                }
            }
            
            // 更新子弹位置
            function updateBullets() {
                player.bullets.forEach((bullet, index) => {
                    bullet.y -= bullet.speed;
                    
                    // 移除超出屏幕的子弹
                    if (bullet.y + bullet.height < 0) {
                        player.bullets.splice(index, 1);
                    }
                });
            }
            
            // 生成敌人
            function spawnEnemy() {
                const now = Date.now();
                if (now - enemySettings.lastSpawn > enemySettings.spawnRate) {
                    enemies.push({
                        x: Math.random() * (canvas.width - enemySettings.width),
                        y: -enemySettings.height,
                        width: enemySettings.width,
                        height: enemySettings.height,
                        speed: enemySettings.speed + Math.random()
                    });
                    enemySettings.lastSpawn = now;
                    
                    // 随着分数增加敌人生成速度
                    enemySettings.spawnRate = Math.max(300, 1000 - score * 5);
                }
            }
            
            // 更新敌人位置
            function updateEnemies() {
                enemies.forEach((enemy, index) => {
                    enemy.y += enemy.speed;
                    
                    // 移除超出屏幕的敌人
                    if (enemy.y > canvas.height) {
                        enemies.splice(index, 1);
                    }
                });
            }
            
            // 生成陨石
            function spawnMeteor() {
                const now = Date.now();
                if (now - meteorSettings.lastSpawn > meteorSettings.spawnRate) {
                    meteors.push({
                        x: Math.random() * (canvas.width - meteorSettings.width),
                        y: -meteorSettings.height,
                        width: meteorSettings.width,
                        height: meteorSettings.height,
                        speed: meteorSettings.speed + Math.random() * 2
                    });
                    meteorSettings.lastSpawn = now;
                }
            }
            
            // 更新陨石位置
            function updateMeteors() {
                meteors.forEach((meteor, index) => {
                    meteor.y += meteor.speed;
                    
                    // 移除超出屏幕的陨石
                    if (meteor.y > canvas.height) {
                        meteors.splice(index, 1);
                    }
                });
            }
            
            // 检测碰撞
            function checkCollisions() {
                // 子弹与敌人碰撞
                player.bullets.forEach((bullet, bIndex) => {
                    enemies.forEach((enemy, eIndex) => {
                        if (
                            bullet.x < enemy.x + enemy.width &&
                            bullet.x + bullet.width > enemy.x &&
                            bullet.y < enemy.y + enemy.height &&
                            bullet.y + bullet.height > enemy.y
                        ) {
                            // 碰撞发生
                            player.bullets.splice(bIndex, 1);
                            enemies.splice(eIndex, 1);
                            score += 10;
                            scoreEl.textContent = score;
                            
                            // 添加爆炸效果
                            explosions.push({
                                x: enemy.x + enemy.width / 2,
                                y: enemy.y + enemy.height / 2,
                                radius: enemy.width / 2,
                                frame: 0
                            });
                        }
                    });
                });
                
                // 玩家与敌人碰撞
                enemies.forEach((enemy, index) => {
                    if (
                        player.x < enemy.x + enemy.width &&
                        player.x + player.width > enemy.x &&
                        player.y < enemy.y + enemy.height &&
                        player.y + player.height > enemy.y
                    ) {
                        // 碰撞发生
                        enemies.splice(index, 1);
                        health -= 10;
                        healthEl.style.width = `${health}%`;
                        
                        // 添加爆炸效果
                        explosions.push({
                            x: enemy.x + enemy.width / 2,
                            y: enemy.y + enemy.height / 2,
                            radius: enemy.width / 2,
                            frame: 0
                        });
                        
                        if (health <= 0) {
                            endGame();
                        }
                    }
                });
                
                // 玩家与陨石碰撞
                meteors.forEach((meteor, index) => {
                    if (
                        player.x < meteor.x + meteor.width &&
                        player.x + player.width > meteor.x &&
                        player.y < meteor.y + meteor.height &&
                        player.y + player.height > meteor.y
                    ) {
                        // 碰撞发生
                        meteors.splice(index, 1);
                        health -= 5;
                        healthEl.style.width = `${health}%`;
                        
                        // 添加爆炸效果
                        explosions.push({
                            x: meteor.x + meteor.width / 2,
                            y: meteor.y + meteor.height / 2,
                            radius: meteor.width / 2,
                            frame: 0
                        });
                        
                        if (health <= 0) {
                            endGame();
                        }
                    }
                });
            }
            
            // 更新玩家位置
            function updatePlayer() {
                if (keys.ArrowLeft && player.x > 0) {
                    player.x -= player.speed;
                }
                if (keys.ArrowRight && player.x < canvas.width - player.width) {
                    player.x += player.speed;
                }
                if (keys.ArrowUp && player.y > 0) {
                    player.y -= player.speed;
                }
                if (keys.ArrowDown && player.y < canvas.height - player.height) {
                    player.y += player.speed;
                }
                if (keys[' ']) {
                    shoot();
                }
            }
            
            // 游戏主循环
            function gameLoop() {
                if (!gameRunning) return;
                
                // 清空画布
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                
                // 更新和绘制
                updateStars();
                drawStars();
                
                updatePlayer();
                drawPlayer();
                
                updateBullets();
                drawBullets();
                
                spawnEnemy();
                updateEnemies();
                drawEnemies();
                
                spawnMeteor();
                updateMeteors();
                drawMeteors();
                
                drawExplosions();
                
                checkCollisions();
                
                animationId = requestAnimationFrame(gameLoop);
            }
            
            // 开始游戏
            function startGame() {
                // 重置游戏状态
                score = 0;
                health = 100;
                gameRunning = true;
                
                player.x = canvas.width / 2 - 25;
                player.y = canvas.height - 80;
                player.bullets = [];
                
                enemies.length = 0;
                meteors.length = 0;
                explosions.length = 0;
                
                scoreEl.textContent = score;
                healthEl.style.width = '100%';
                
                startScreen.style.display = 'none';
                gameOverScreen.style.display = 'none';
                
                gameLoop();
            }
            
            // 结束游戏
            function endGame() {
                gameRunning = false;
                finalScoreEl.textContent = score;
                gameOverScreen.style.display = 'flex';
                cancelAnimationFrame(animationId);
            }
            
            // 键盘事件监听
            document.addEventListener('keydown', (e) => {
                if (keys.hasOwnProperty(e.key)) {
                    keys[e.key] = true;
                }
            });
            
            document.addEventListener('keyup', (e) => {
                if (keys.hasOwnProperty(e.key)) {
                    keys[e.key] = false;
                }
            });
            
            // 按钮事件监听
            startBtn.addEventListener('click', startGame);
            restartBtn.addEventListener('click', startGame);
        });
    </script>
</body>
</html>
